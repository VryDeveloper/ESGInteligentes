name: CI/CD - ESGInteligentes

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PROJECT_FILE: ESGInteligentes.csproj

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build release
        run: dotnet build -c Release --no-restore

      - name: Run unit tests
        run: dotnet test --verbosity normal

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            PROJECT_FILE=${{ env.PROJECT_FILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # --- NOVOS JOBS DE DEPLOY ---
  deploy-staging:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Deploy to Staging
        run: |
          docker run -d --name esg-staging -p 8081:8080 \
            -e ASPNETCORE_ENVIRONMENT=Staging \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Deploy to Production
        run: |
          docker run -d --name esg-production -p 8080:8080 \
            -e ASPNETCORE_ENVIRONMENT=Production \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest